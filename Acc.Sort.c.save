#include "Acc.Main.h"
#include "Acc.Sort.h"

static SortDirection sort_dir = ASC;
static (*cust_func)

/*default function in QuckSort()*/
static int cmpElements(const SortElement* a, const SortElement* b);


bool CreateSortArray(SortArray* s, unsigned long aNumOfItems)
{
    /*first dispose s because otherwise mem leak will occure*/
    if (s != NULL)
        DisposeSortArray(*s);

    *s = (SortArray) malloc(aNumOfItems * sizeof(SortElement));
    if (*s == NULL)
        return false;

    return true;
}

void DisposeSortArray(SortArray s)
{
    if (s != NULL)
        free(s);
}

bool ResizeSortArray(SortArray* s,unsigned long oldNumOfItems, unsigned long newNumOfItems)
{
    /*create the new array and allocate memory*/
    SortArray newarr = NULL;
    if (CreateSortArray(&newarr, newNumOfItems) == true) {

    /*copy old values to new array*/
    memcpy(newarr, *s, oldNumOfItems);

    /*delete old and set up new*/
    DisposeSortArray(*s);
    *s = newarr;
    } else return false;
}

int Traverse_SortArray(const SortArray arr, unsigned long num,void (*func)(SortElement sl))
{
    unsigned long i = 0;
    unsigned long count = 0;

    for ( i = 0; i < num; i++) {
       (*func)(arr[i]);
       count++;
    }
    return count;
}

int Traverse_SortArray_Default(const SortArray arr, unsigned long num)
{
    unsigned long i = 0;
    unsigned long count = 0;

    for ( i = 0; i < num; i++) {
       PrintSortElement(arr[i]);
       count++;
    }
    return count;
}

int Traversen_SortArray(const SortArray arr, unsigned long num,void (*func)(SortElement sl), unsigned long start,  unsigned long count)
{
    unsigned long i = 0;
    unsigned long c = 0;

    for (i = start; i < count && i < num; i++) {
       (*func)(arr[i]);
       c++;
    }
    return c;
}

int Traversen_SortArray_Default(const SortArray arr, unsigned long num, unsigned long start,  unsigned long count)
{
    unsigned long i = 0;
    unsigned long c = 0;

    count = start+count;
    if (count >= num)
        count = num;

    for (i = start; i < count ; i++) {
       PrintSortElement(arr[i]);
       c++;
    }
    return (c);
}

int QuckSort(SortArray arr, unsigned long num,  int (*comp)(const SortElement* a, const SortElement* b))
{
    /*
    void qsort(void *base, size_t nmem, size_t size, int (*comp)(const void *, const void *));

    Sorts the array pointed to by base in the order provided by the function pointed to by comp;
    the array has nmem elements, each of size bytes; the comparison function will return a value
    less than zero if the object pointed to by the first argument is less than the object pointed
    to by the second argument, zero if the objects are equivalent, or a value greater than zero if
    the first object is greater.
    */

    qsort(arr, num, sizeof(SortElement), (*comp));

    return 0;
}

int QuckSort_Default(SortArray arr, unsigned long num)
{
       /*
    void qsort(void *base, size_t nmem, size_t size, int (*comp)(const void *, const void *));

    Sorts the array pointed to by base in the order provided by the function pointed to by comp;
    the array has nmem elements, each of size bytes; the comparison function will return a value
    less than zero if the object pointed to by the first argument is less than the object pointed
    to by the second argument, zero if the objects are equivalent, or a value greater than zero if
    the first object is greater.
    */

    qsort(arr, num, sizeof(SortElement), cmpElements);

    return 0;
}

/*Elements should be of the same type*/
static int cmpElements(const SortElement* a, const SortElement* b)
{
    union sort_union A = a->data;
    union sort_union B = b->data;

    switch (a->type) {
        case SORT_BY_ID:
            if (A.ID == B.ID)
                return  0;
            else if (A.ID < B.ID)
                return (sort_dir == ASC ? -1 : 1);
            else
                return (sort_dir == ASC ? 1 : -1);
            break;
        case SORT_BY_DATE:
            return (sort_dir == ASC ? datecmp(A.date, B.date) : -(datecmp(A.date, B.date)));
            break;
        case SORT_BY_VALUE:
            if (A.value == B.value)
                return 0;
            else if (A.value < B.value)
                return (sort_dir == ASC ? -1 : 1);
            else
                return (sort_dir == ASC ? 1 : -1);
            break;
        case SORT_BY_TYPE:
            return (sort_dir == ASC ? strcmp(A.type, B.type): -(strcmp(A.type, B.type)));
            break;
        case SORT_BY_NONE:
            break;
    }

    return 0;
}

int PrintSortElement(SortElement sl)
{
    PrintItem(sl.rec_ptr->data);
    return 0;
}

SortDirection get_sortDirect(void)
{
    return sort_dir;
}

void set_sortDirect(SortDirection sd)
{
    sort_dir = sd;
}
